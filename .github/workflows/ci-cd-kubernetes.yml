---
name: Build, Lint and Deploy Docker Image

on:
  push:
    branches:
      - main
      - develop

jobs:
  # Job de Lint para Dockerfiles
  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Lint Dockerfiles with Hadolint (Docker)
        run: |
          set -eu pipefail
          repo_root="$(pwd)"
          find . -type f -iname 'Dockerfile' | while read f; do
            echo "Linting: $f"
            docker run --rm -i -v "${repo_root}:/mnt" hadolint/hadolint:latest-debian hadolint --no-fail "/mnt/${f}"
          done


  # Job de Build con Docker
  build:
    runs-on: ubuntu-latest
    needs: dockerfile-lint
    if: success()
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      # 1️⃣ Build Microservicio.Cohere
      - name: Build and push Cohere microservice
        uses: docker/build-push-action@v5
        with:
          context: ./TelegramBot/Microservicio.Cohere
          file: ./TelegramBot/Microservicio.Cohere/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:cohere-${{ github.sha }}

      # 2️⃣ Build Microservicio.TelegramBot
      - name: Build and push TelegramBot microservice
        uses: docker/build-push-action@v5
        with:
          context: ./TelegramBot/Microservicio.TelegramBot
          file: ./TelegramBot/Microservicio.TelegramBot/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}:telegrambot-${{ github.sha }}

  # Job de Deploy
  deploy:
    runs-on: self-hosted
    needs: build
    if: success()
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          
      - name: Set up Kubernetes context
        run: |
          echo "Setting up kubectl"
          # Aquí deberías configurar tu kubeconfig real
          # Por ejemplo, para un clúster cloud:
          # echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          kubectl config use-context minikube
          
      - name: Deploy to Kubernetes using Kustomize
        run: |
          echo "Deploying application"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "Deploying to production"
            kubectl apply -k ./manifiestos/produccion
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            echo "Deploying to development"
            kubectl apply -k ./manifiestos/desarrollo
          else
            echo "Unknown branch, skipping deployment"
            exit 1
          fi
          
      - name: Verify Deployment
        run: |
          echo "Verifying deployment"
          NAMESPACE=${{ github.ref == 'refs/heads/main' && 'prod-namespace' || 'dev-namespace' }}
          kubectl get pods -n $NAMESPACE
          kubectl get deployments -n $NAMESPACE
          kubectl rollout status deployment/your-app-name -n $NAMESPACE
